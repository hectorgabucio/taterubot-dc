// Code generated by go-localize; DO NOT EDIT.
// This file was generated by robots at
// 2022-04-10 12:40:08.1803098 +0200 CEST m=+0.005494301

package localizations

import (
	"bytes"
	"fmt"
	"strings"
	"text/template"
)

var localizations = map[string]string{
	"en.texts.duration":    "Duration",
	"en.texts.hello":       ":wave: Hey! I am **{{.botName}}**. Im capable of recording everything you say and transform it into an audio message.\n:flag_gb: I am configured to talk to you in english.\n:microphone2: To start recording, enter the channel **{{.voiceChannel}}** and start talking to me.\n:sound: When you get out the channel, I will send the audio message.",
	"en.texts.stats":       ">>> :chart_with_upwards_trend: **Monthly stats**: \n\n:earth_africa: Global stats:\n- {{.globalDuration}} seconds of audio sent\n- {{.globalAmount}} audio files recorded\n- Median duration of {{.globalMedianDuration}} seconds",
	"en.texts.stats-empty": "Start sending voice messages to have stats!",
	"es.texts.duration":    "Duración",
	"es.texts.hello":       ":wave: Hola! Soy **{{.botName}}**. Soy un bot capaz de grabar lo que dices y transformarlo en mensajes de voz.\n:flag_es: Estoy configurado para responderte en castellano.\n:microphone2: Para empezar a grabar, entra en el canal **{{.voiceChannel}}** y empieza a hablarme.\n:sound: Cuando salgas del mismo, mandaré el mensaje de voz.",
}

type Replacements map[string]interface{}

type Localizer struct {
	Locale         string
	FallbackLocale string
	Localizations  map[string]string
}

func New(locale string, fallbackLocale string) *Localizer {
	t := &Localizer{Locale: locale, FallbackLocale: fallbackLocale}
	t.Localizations = localizations
	return t
}

func (t Localizer) SetLocales(locale, fallback string) Localizer {
	t.Locale = locale
	t.FallbackLocale = fallback
	return t
}

func (t Localizer) SetLocale(locale string) Localizer {
	t.Locale = locale
	return t
}

func (t Localizer) SetFallbackLocale(fallback string) Localizer {
	t.FallbackLocale = fallback
	return t
}

func (t Localizer) GetWithLocale(locale, key string, replacements ...*Replacements) string {
	str, ok := t.Localizations[t.getLocalizationKey(locale, key)]
	if !ok {
		str, ok = t.Localizations[t.getLocalizationKey(t.FallbackLocale, key)]
		if !ok {
			return key
		}
	}

	// If the str doesn't have any substitutions, no need to
	// template.Execute.
	if strings.Index(str, "}}") == -1 {
		return str
	}

	return t.replace(str, replacements...)
}

func (t Localizer) Get(key string, replacements ...*Replacements) string {
	str := t.GetWithLocale(t.Locale, key, replacements...)
	return str
}

func (t Localizer) getLocalizationKey(locale string, key string) string {
	return fmt.Sprintf("%v.%v", locale, key)
}

func (t Localizer) replace(str string, replacements ...*Replacements) string {
	b := &bytes.Buffer{}
	tmpl, err := template.New("").Parse(str)
	if err != nil {
		return str
	}

	replacementsMerge := Replacements{}
	for _, replacement := range replacements {
		for k, v := range *replacement {
			replacementsMerge[k] = v
		}
	}

	err = template.Must(tmpl, err).Execute(b, replacementsMerge)
	if err != nil {
		return str
	}
	buff := b.String()
	return buff
}
