// Code generated by mockery v2.10.6. DO NOT EDIT.

package discordmocks

import (
	io "io"

	discord "github.com/hectorgabucio/taterubot-dc/domain/discord"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// CreateChannel provides a mock function with given fields: guildID, name, channelType, maxUsers
func (_m *Client) CreateChannel(guildID string, name string, channelType discord.ChannelType, maxUsers int) (discord.Channel, error) {
	ret := _m.Called(guildID, name, channelType, maxUsers)

	var r0 discord.Channel
	if rf, ok := ret.Get(0).(func(string, string, discord.ChannelType, int) discord.Channel); ok {
		r0 = rf(guildID, name, channelType, maxUsers)
	} else {
		r0 = ret.Get(0).(discord.Channel)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, discord.ChannelType, int) error); ok {
		r1 = rf(guildID, name, channelType, maxUsers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditInteraction provides a mock function with given fields: token, message
func (_m *Client) EditInteraction(token string, message string) error {
	ret := _m.Called(token, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(token, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditInteractionComplex provides a mock function with given fields: token, edit
func (_m *Client) EditInteractionComplex(token string, edit discord.ComplexInteractionEdit) error {
	ret := _m.Called(token, edit)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, discord.ComplexInteractionEdit) error); ok {
		r0 = rf(token, edit)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EstablishVoiceConnection provides a mock function with given fields: guildID, channelID, mute, deaf, done
func (_m *Client) EstablishVoiceConnection(guildID string, channelID string, mute bool, deaf bool, done chan bool) (*discord.VoiceConnection, error) {
	ret := _m.Called(guildID, channelID, mute, deaf, done)

	var r0 *discord.VoiceConnection
	if rf, ok := ret.Get(0).(func(string, string, bool, bool, chan bool) *discord.VoiceConnection); ok {
		r0 = rf(guildID, channelID, mute, deaf, done)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discord.VoiceConnection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, bool, bool, chan bool) error); ok {
		r1 = rf(guildID, channelID, mute, deaf, done)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBotUsername provides a mock function with given fields:
func (_m *Client) GetBotUsername() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetChannel provides a mock function with given fields: channelID
func (_m *Client) GetChannel(channelID string) (discord.Channel, error) {
	ret := _m.Called(channelID)

	var r0 discord.Channel
	if rf, ok := ret.Get(0).(func(string) discord.Channel); ok {
		r0 = rf(channelID)
	} else {
		r0 = ret.Get(0).(discord.Channel)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(channelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGuildChannels provides a mock function with given fields: guildID
func (_m *Client) GetGuildChannels(guildID string) ([]discord.Channel, error) {
	ret := _m.Called(guildID)

	var r0 []discord.Channel
	if rf, ok := ret.Get(0).(func(string) []discord.Channel); ok {
		r0 = rf(guildID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]discord.Channel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGuildUsers provides a mock function with given fields: guildID
func (_m *Client) GetGuildUsers(guildID string) ([]discord.User, error) {
	ret := _m.Called(guildID)

	var r0 []discord.User
	if rf, ok := ret.Get(0).(func(string) []discord.User); ok {
		r0 = rf(guildID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]discord.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGuilds provides a mock function with given fields:
func (_m *Client) GetGuilds() ([]discord.Guild, error) {
	ret := _m.Called()

	var r0 []discord.Guild
	if rf, ok := ret.Get(0).(func() []discord.Guild); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]discord.Guild)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: userID
func (_m *Client) GetUser(userID string) (discord.User, error) {
	ret := _m.Called(userID)

	var r0 discord.User
	if rf, ok := ret.Get(0).(func(string) discord.User); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(discord.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendFileMessage provides a mock function with given fields: channelID, name, contentType, readable
func (_m *Client) SendFileMessage(channelID string, name string, contentType string, readable io.Reader) (discord.Message, error) {
	ret := _m.Called(channelID, name, contentType, readable)

	var r0 discord.Message
	if rf, ok := ret.Get(0).(func(string, string, string, io.Reader) discord.Message); ok {
		r0 = rf(channelID, name, contentType, readable)
	} else {
		r0 = ret.Get(0).(discord.Message)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, io.Reader) error); ok {
		r1 = rf(channelID, name, contentType, readable)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendTextMessage provides a mock function with given fields: channelID, message
func (_m *Client) SendTextMessage(channelID string, message string) error {
	ret := _m.Called(channelID, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(channelID, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetEmbed provides a mock function with given fields: channelID, messageID, embed
func (_m *Client) SetEmbed(channelID string, messageID string, embed discord.MessageEmbed) error {
	ret := _m.Called(channelID, messageID, embed)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, discord.MessageEmbed) error); ok {
		r0 = rf(channelID, messageID, embed)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
