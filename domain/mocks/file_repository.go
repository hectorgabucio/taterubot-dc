// Code generated by mockery v2.10.6. DO NOT EDIT.

package domainmocks

import (
	os "os"

	mock "github.com/stretchr/testify/mock"
)

// FileRepository is an autogenerated mock type for the FileRepository type
type FileRepository struct {
	mock.Mock
}

// CreateEmpty provides a mock function with given fields: fileName
func (_m *FileRepository) CreateEmpty(fileName string) (*os.File, error) {
	ret := _m.Called(fileName)

	var r0 *os.File
	if rf, ok := ret.Get(0).(func(string) *os.File); ok {
		r0 = rf(fileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*os.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAll provides a mock function with given fields: fileNames
func (_m *FileRepository) DeleteAll(fileNames ...string) {
	_va := make([]interface{}, len(fileNames))
	for _i := range fileNames {
		_va[_i] = fileNames[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// GetFullPath provides a mock function with given fields: fileName
func (_m *FileRepository) GetFullPath(fileName string) string {
	ret := _m.Called(fileName)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(fileName)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Open provides a mock function with given fields: fileName
func (_m *FileRepository) Open(fileName string) (*os.File, error) {
	ret := _m.Called(fileName)

	var r0 *os.File
	if rf, ok := ret.Get(0).(func(string) *os.File); ok {
		r0 = rf(fileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*os.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
